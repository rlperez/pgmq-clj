<!-- Make README.md changes here. README.md is a generated file and changes will be overwritten. -->

[![codecov](https://codecov.io/github/rlperez/pgmq-clj/graph/badge.svg?token=KIC7UP13WY)](https://codecov.io/github/rlperez/pgmq-clj)
[![checks](https://badgen.net/github/checks/rlperez/pgmq-clj)](https://github.com/rlperez/pgmq-clj/actions)
[![license](https://badgen.net/github/license/rlperez/pgmq-clj)](https://opensource.org/license/mit)
[![latest-release](https://badgen.net/github/release/rlperez/pgmq-clj)](https://github.com/rlperez/pgmq-clj/releases)
[![latest-tag](https://badgen.net/github/tag/rlperez/pgmq-clj)](https://github.com/rlperez/pgmq-clj/tags)

# pgmq-clj
A library that provides a wrapper of [PGMQ](https://github.com/tembo-io/pgmq), a [PostgreSQL](https://www.postgresql.org/) message queue implementation, making it easier to integrate into your application. As designed you can implement your own database access layer by implementing an `Adapter` conforming to a simple [protocol](https://github.com/rlperez/pgmq-clj/blob/master/src/com/thirstysink/pgmq_clj/db/adapter.clj). The provided adapter utilizes [HikariCP](https://github.com/brettwooldridge/HikariCP) and [next.jdbc](https://github.com/seancorfield/next-jdbc).

## Types of Documentation

* [Documentation](#documentation)
  This is documentation that will contain explanations of the functions as well as usage examples when appropriate. It is generated from the docstrings present in code generated by [quickdoc](https://github.com/borkdude/quickdoc). This documentation has a complete table of contents.

* [Specs](#specs)
  This project uses [clojure.spec.alpha](https://github.com/clojure/spec.alpha/) to provide a means of validating expectations. Using this project, leveraging the `clojure.spec.alpha/describe`, documentation is generated describing functions, return types, and their expected inputs. They are organized by a namespaced function name followed by the arguments of that function.

## Build Jar

This will build a jar that can be used directly in your applications.

```
# babashka
bb jar

# build tools
clj -T:build all
```

## Execute Tests

This will run all tests. Tests currently include an integration test using test containers against postgresql 15, 16, and 17.

```
# babashka
bb test
bb test coverage
bb test watch

# build tools
clj -M:test --profile test
clj -M:test --profile coverage
clj -M:test --profile watch
```

## Update Dependencies

This will update the local depencies in `deps.edn` and `bb.edn`.

```
# babashka
bb upgrade

# build tools
clj -M:upgrade
```
