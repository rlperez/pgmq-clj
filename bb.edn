{:min-bb-version "0.8.156"
 :paths ["src" "."]
 :deps  {failjure/failjure {:mvn/version "2.3.0"}}
 :require [tasks.document]
 :tasks {:require ([babashka.fs :as fs]
                   [babashka.tasks :refer [shell]])
         document {:doc "generate documentation"
                   :extra-deps {io.github.borkdude/quickdoc {:git/sha "3aad5fde31c30bdb84554ff5d2d0263fd1743f04"}}
                   :task (exec 'tasks.document/-main)}
         run       {:doc  "starts the app"
                    :task (clojure {:dir "."} "-M:dev")
                    :override-builtin true}

         nrepl     {:doc  "starts the nREPL"
                    :task (clojure {:dir "."} "-M:dev:nrepl")}

         cider     {:doc  "starts the cider"
                    :task (clojure {:dir "."} "-M:dev:cider")}

         test {:doc "runs tests"
               :task (let [args *command-line-args*   ; Get args from the current task context
                           profile (if (empty? args) "test" (first args)) ; Use the first argument or default to "test"
                           extra-opts (rest args) ; Everything after the profile is considered extra options
                           cmd (str "bin/kaocha --profile " profile
                                    (when (seq extra-opts)
                                      (str " " (clojure.string/join " " extra-opts))))]
                       (println "Executing command:" cmd)
                       (shell {:dir "."} cmd))}

         pom {:doc "generates a Maven pom.xml"
              :task (do
                      (clojure {:dir "."} "-T:build write-pom"))}

         uberjar   {:doc  "builds the uberjar with shadow-cljs output"
                    :task (do
                            (clojure {:dir "."} "-T:build all"))
                    :override-builtin true}

         upgrade   {:doc "updates dependencies for project"
                    :task (do
                            (clojure {:dir "."} "-M:upgrade"))}

         format    {:doc  "formats codebase"
                    :task (shell {:dir "src"} "cljfmt fix")}}}
