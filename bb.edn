{:min-bb-version "0.8.156"
 :deps  {failjure/failjure {:mvn/version "2.3.0"}}
 :tasks {:requires ([babashka.fs :as fs]
                    [babashka.tasks :refer [shell]]
                    [clojure.edn :as edn]
                    [clojure.java.io :as io]
                    [clojure.spec.alpha :as s]
                    [com.thirstysink.pgmq-clj.specs])
         quickdoc {:doc "Invoke quickdoc"
                   :extra-deps {io.github.borkdude/quickdoc {:git/sha "7c8bef54eda28367193ec433af01bb940114f012"}}
                   :task (let [api-file-path "API.md"
                               readme-tmpl-path "README.md.tmpl"
                               readme-path "README.md"
                               readme-bkp-path (str readme-path ".bkp")
                               specs-path "src/com/thirstysink/pgmq_clj/specs.clj"
                               specs (keys (s/registry))]
                           (exec 'quickdoc.api/quickdoc)
                           (io/copy (io/file readme-path) (io/file readme-bkp-path))
                           (io/delete-file (io/file readme-path))
                           (with-open [tmpl (io/reader readme-tmpl-path)
                                       api (io/reader api-file-path)
                                       readme (io/writer readme-path)]
                             (.write readme (slurp tmpl))
                             (.write readme "\n# Documentation\n")
                             (.write readme (slurp api))
                             (.write readme "\n# Specs")
                             (doseq [spec (keys (s/registry))]
                               (.write readme (str "\n### " spec "\n"))
                               (.write readme (str "```clojure\n" (pr-str (s/describe spec)) "\n```\n"))))
                           (io/delete-file (io/file api-file-path))
                           (io/delete-file (io/file readme-bkp-path)))}
         run       {:doc  "starts the app"
                    :task (clojure {:dir "."} "-M:dev")
                    :override-builtin true}

         nrepl     {:doc  "starts the nREPL"
                    :task (clojure {:dir "."} "-M:dev:nrepl")}

         cider     {:doc  "starts the cider"
                    :task (clojure {:dir "."} "-M:dev:cider")}

         test {:doc "runs tests"
               :task (let [args *command-line-args*   ; Get args from the current task context
                           profile (if (empty? args) "test" (first args)) ; Use the first argument or default to "test"
                           extra-opts (rest args) ; Everything after the profile is considered extra options
                           cmd (str "bin/kaocha --profile " profile
                                    (when (seq extra-opts)
                                      (str " " (clojure.string/join " " extra-opts))))]
                       (println "Executing command:" cmd)
                       (shell {:dir "."} cmd))}

         pom {:doc "generates a Maven pom.xml"
              :task (do
                      (clojure {:dir "."} "-T:build write-pom"))}

         uberjar   {:doc  "builds the uberjar with shadow-cljs output"
                    :task (do
                            (clojure {:dir "."} "-T:build all"))
                    :override-builtin true}

         upgrade   {:doc "updates dependencies for project"
                    :task (do
                            (clojure {:dir "."} "-M:upgrade"))}

         format    {:doc  "Formats codebase"
                    :task (shell {:dir "src"} "cljfmt fix")}}}
